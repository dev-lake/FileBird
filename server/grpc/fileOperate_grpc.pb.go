// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: proto/fileOperate.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileOperateClient is the client API for FileOperate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileOperateClient interface {
	CopyFile(ctx context.Context, in *CopyFileReq, opts ...grpc.CallOption) (*FileOptRep, error)
	MoveFile(ctx context.Context, in *MoveFileReq, opts ...grpc.CallOption) (*FileOptRep, error)
	DeleteFile(ctx context.Context, in *DeleteFileReq, opts ...grpc.CallOption) (*FileOptRep, error)
	RenameFile(ctx context.Context, in *RenameFileReq, opts ...grpc.CallOption) (*FileOptRep, error)
	MakeDir(ctx context.Context, in *MakeDirReq, opts ...grpc.CallOption) (*FileOptRep, error)
}

type fileOperateClient struct {
	cc grpc.ClientConnInterface
}

func NewFileOperateClient(cc grpc.ClientConnInterface) FileOperateClient {
	return &fileOperateClient{cc}
}

func (c *fileOperateClient) CopyFile(ctx context.Context, in *CopyFileReq, opts ...grpc.CallOption) (*FileOptRep, error) {
	out := new(FileOptRep)
	err := c.cc.Invoke(ctx, "/FileOperate/CopyFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileOperateClient) MoveFile(ctx context.Context, in *MoveFileReq, opts ...grpc.CallOption) (*FileOptRep, error) {
	out := new(FileOptRep)
	err := c.cc.Invoke(ctx, "/FileOperate/MoveFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileOperateClient) DeleteFile(ctx context.Context, in *DeleteFileReq, opts ...grpc.CallOption) (*FileOptRep, error) {
	out := new(FileOptRep)
	err := c.cc.Invoke(ctx, "/FileOperate/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileOperateClient) RenameFile(ctx context.Context, in *RenameFileReq, opts ...grpc.CallOption) (*FileOptRep, error) {
	out := new(FileOptRep)
	err := c.cc.Invoke(ctx, "/FileOperate/RenameFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileOperateClient) MakeDir(ctx context.Context, in *MakeDirReq, opts ...grpc.CallOption) (*FileOptRep, error) {
	out := new(FileOptRep)
	err := c.cc.Invoke(ctx, "/FileOperate/MakeDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileOperateServer is the server API for FileOperate service.
// All implementations must embed UnimplementedFileOperateServer
// for forward compatibility
type FileOperateServer interface {
	CopyFile(context.Context, *CopyFileReq) (*FileOptRep, error)
	MoveFile(context.Context, *MoveFileReq) (*FileOptRep, error)
	DeleteFile(context.Context, *DeleteFileReq) (*FileOptRep, error)
	RenameFile(context.Context, *RenameFileReq) (*FileOptRep, error)
	MakeDir(context.Context, *MakeDirReq) (*FileOptRep, error)
	mustEmbedUnimplementedFileOperateServer()
}

// UnimplementedFileOperateServer must be embedded to have forward compatible implementations.
type UnimplementedFileOperateServer struct {
}

func (UnimplementedFileOperateServer) CopyFile(context.Context, *CopyFileReq) (*FileOptRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyFile not implemented")
}
func (UnimplementedFileOperateServer) MoveFile(context.Context, *MoveFileReq) (*FileOptRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveFile not implemented")
}
func (UnimplementedFileOperateServer) DeleteFile(context.Context, *DeleteFileReq) (*FileOptRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedFileOperateServer) RenameFile(context.Context, *RenameFileReq) (*FileOptRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameFile not implemented")
}
func (UnimplementedFileOperateServer) MakeDir(context.Context, *MakeDirReq) (*FileOptRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeDir not implemented")
}
func (UnimplementedFileOperateServer) mustEmbedUnimplementedFileOperateServer() {}

// UnsafeFileOperateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileOperateServer will
// result in compilation errors.
type UnsafeFileOperateServer interface {
	mustEmbedUnimplementedFileOperateServer()
}

func RegisterFileOperateServer(s grpc.ServiceRegistrar, srv FileOperateServer) {
	s.RegisterService(&FileOperate_ServiceDesc, srv)
}

func _FileOperate_CopyFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileOperateServer).CopyFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileOperate/CopyFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileOperateServer).CopyFile(ctx, req.(*CopyFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileOperate_MoveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileOperateServer).MoveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileOperate/MoveFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileOperateServer).MoveFile(ctx, req.(*MoveFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileOperate_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileOperateServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileOperate/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileOperateServer).DeleteFile(ctx, req.(*DeleteFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileOperate_RenameFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileOperateServer).RenameFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileOperate/RenameFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileOperateServer).RenameFile(ctx, req.(*RenameFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileOperate_MakeDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeDirReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileOperateServer).MakeDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileOperate/MakeDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileOperateServer).MakeDir(ctx, req.(*MakeDirReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FileOperate_ServiceDesc is the grpc.ServiceDesc for FileOperate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileOperate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FileOperate",
	HandlerType: (*FileOperateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CopyFile",
			Handler:    _FileOperate_CopyFile_Handler,
		},
		{
			MethodName: "MoveFile",
			Handler:    _FileOperate_MoveFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _FileOperate_DeleteFile_Handler,
		},
		{
			MethodName: "RenameFile",
			Handler:    _FileOperate_RenameFile_Handler,
		},
		{
			MethodName: "MakeDir",
			Handler:    _FileOperate_MakeDir_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/fileOperate.proto",
}
